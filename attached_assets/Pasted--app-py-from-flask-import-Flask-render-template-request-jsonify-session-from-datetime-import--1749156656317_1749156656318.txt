# app.py
from flask import Flask, render_template, request, jsonify, session
from datetime import datetime
import json
import secrets

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# Simulação de banco de dados de produtos
PRODUCTS = {
    1: {"id": 1, "name": "Notebook Dell", "price": 3499.90, "image": "laptop.jpg"},
    2: {"id": 2, "name": "Mouse Gamer", "price": 199.90, "image": "mouse.jpg"},
    3: {"id": 3, "name": "Teclado Mecânico", "price": 459.90, "image": "keyboard.jpg"},
    4: {"id": 4, "name": "Monitor 24\"", "price": 899.90, "image": "monitor.jpg"},
    5: {"id": 5, "name": "Headset Bluetooth", "price": 299.90, "image": "headset.jpg"},
}

# Configurações da loja
STORE_CONFIG = {
    "pix_key": "12.345.678/0001-90",  # CNPJ da loja
    "store_name": "Tech Store Brasil",
    "phone": "(11) 9999-9999"
}

@app.route('/')
def index():
    return render_template('index.html', products=PRODUCTS)

@app.route('/cart')
def cart():
    return render_template('cart.html')

@app.route('/checkout')
def checkout():
    return render_template('checkout.html', store_config=STORE_CONFIG)

@app.route('/api/cart/add', methods=['POST'])
def add_to_cart():
    data = request.json
    product_id = data.get('product_id')
    quantity = data.get('quantity', 1)
    
    if 'cart' not in session:
        session['cart'] = {}
    
    cart = session['cart']
    
    if str(product_id) in cart:
        cart[str(product_id)] += quantity
    else:
        cart[str(product_id)] = quantity
    
    session['cart'] = cart
    session.modified = True
    
    return jsonify({"success": True, "cart_count": sum(cart.values())})

@app.route('/api/cart/items')
def get_cart_items():
    cart = session.get('cart', {})
    items = []
    total = 0
    
    for product_id, quantity in cart.items():
        product = PRODUCTS.get(int(product_id))
        if product:
            item = {
                **product,
                "quantity": quantity,
                "subtotal": product["price"] * quantity
            }
            items.append(item)
            total += item["subtotal"]
    
    return jsonify({
        "items": items,
        "total": total,
        "cart_count": sum(cart.values())
    })

@app.route('/api/cart/update', methods=['POST'])
def update_cart():
    data = request.json
    product_id = str(data.get('product_id'))
    quantity = data.get('quantity')
    
    if 'cart' not in session:
        session['cart'] = {}
    
    if quantity <= 0:
        session['cart'].pop(product_id, None)
    else:
        session['cart'][product_id] = quantity
    
    session.modified = True
    return jsonify({"success": True})

@app.route('/api/checkout/process', methods=['POST'])
def process_checkout():
    data = request.json
    
    # Validar dados do formulário
    required_fields = ['name', 'email', 'phone', 'address', 'payment_method']
    for field in required_fields:
        if not data.get(field):
            return jsonify({"success": False, "error": f"Campo {field} é obrigatório"}), 400
    
    # Processar pedido
    order = {
        "order_id": f"ORD-{datetime.now().strftime('%Y%m%d%H%M%S')}",
        "date": datetime.now().isoformat(),
        "customer": {
            "name": data['name'],
            "email": data['email'],
            "phone": data['phone'],
            "cpf": data.get('cpf', ''),
            "address": data['address']
        },
        "payment": {
            "method": data['payment_method'],
            "status": "pending"
        },
        "items": [],
        "total": 0
    }
    
    # Adicionar itens do carrinho
    cart = session.get('cart', {})
    for product_id, quantity in cart.items():
        product = PRODUCTS.get(int(product_id))
        if product:
            order["items"].append({
                "product": product["name"],
                "quantity": quantity,
                "price": product["price"],
                "subtotal": product["price"] * quantity
            })
            order["total"] += product["price"] * quantity
    
    # Limpar carrinho após pedido
    session['cart'] = {}
    session.modified = True
    
    # Aqui você salvaria o pedido no banco de dados
    # Por enquanto, apenas retornamos os dados
    
    return jsonify({
        "success": True,
        "order": order,
        "pix_key": STORE_CONFIG["pix_key"] if data['payment_method'] == 'pix' else None
    })

# Templates HTML
# Crie uma pasta 'templates' no seu projeto e adicione os seguintes arquivos:

# templates/base.html
BASE_HTML = '''<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Tech Store Brasil{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --danger-color: #ef4444;
        }
        
        body {
            background-color: #f3f4f6;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        
        .navbar {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            transition: transform 0.2s;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }
        
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        }
        
        .product-image {
            height: 200px;
            object-fit: cover;
            border-radius: 12px 12px 0 0;
            background: linear-gradient(135deg, #e0e7ff, #c7d2fe);
        }
        
        .cart-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--danger-color);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
        
        .payment-method {
            cursor: pointer;
            transition: all 0.3s;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
        }
        
        .payment-method:hover {
            border-color: var(--primary-color);
            background-color: #f3f4f6;
        }
        
        .payment-method.selected {
            border-color: var(--primary-color);
            background: linear-gradient(135deg, #ede9fe, #ddd6fe);
        }
        
        .pix-info {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0);
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            .card {
                margin-bottom: 20px;
            }
            
            .product-grid {
                padding: 0 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark sticky-top">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/">
                <i class="bi bi-shop"></i> Tech Store Brasil
            </a>
            <div class="ms-auto">
                <a href="/cart" class="btn btn-light position-relative">
                    <i class="bi bi-cart3"></i> Carrinho
                    <span class="cart-badge" id="cart-count" style="display: none;">0</span>
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="py-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-white text-center py-4 mt-5">
        <div class="container">
            <p class="mb-0">&copy; 2024 Tech Store Brasil. Todos os direitos reservados.</p>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Atualizar contador do carrinho
        function updateCartCount() {
            fetch('/api/cart/items')
                .then(res => res.json())
                .then(data => {
                    const badge = document.getElementById('cart-count');
                    if (data.cart_count > 0) {
                        badge.textContent = data.cart_count;
                        badge.style.display = 'flex';
                    } else {
                        badge.style.display = 'none';
                    }
                });
        }
        
        // Atualizar ao carregar a página
        document.addEventListener('DOMContentLoaded', updateCartCount);
    </script>
    {% block scripts %}{% endblock %}
</body>
</html>'''

# templates/index.html
INDEX_HTML = '''{% extends "base.html" %}

{% block content %}
<div class="container">
    <h1 class="text-center mb-5">
        <i class="bi bi-stars text-warning"></i> 
        Produtos em Destaque
    </h1>
    
    <div class="row product-grid">
        {% for product in products.values() %}
        <div class="col-md-4 col-sm-6 mb-4">
            <div class="card h-100">
                <div class="product-image d-flex align-items-center justify-content-center">
                    <i class="bi bi-laptop" style="font-size: 4rem; color: #6366f1;"></i>
                </div>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">{{ product.name }}</h5>
                    <p class="card-text text-primary fs-4 fw-bold">
                        R$ {{ "%.2f"|format(product.price) }}
                    </p>
                    <div class="mt-auto">
                        <button class="btn btn-primary w-100" onclick="addToCart({{ product.id }})">
                            <i class="bi bi-cart-plus"></i> Adicionar ao Carrinho
                        </button>
                    </div>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>

<!-- Toast de notificação -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="addToCartToast" class="toast" role="alert">
        <div class="toast-header bg-success text-white">
            <i class="bi bi-check-circle me-2"></i>
            <strong class="me-auto">Sucesso!</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">
            Produto adicionado ao carrinho!
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
function addToCart(productId) {
    fetch('/api/cart/add', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            product_id: productId,
            quantity: 1
        })
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            //